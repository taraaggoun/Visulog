DOCUMENTATIOND’une part, on retrouve le fichier COMMITBUILDER.java qui permet de créer un commit. En effet, il permet d’envoyer un travail ou un document directement vers GitLab avec le constructeur CommitBuilder.Ce fichier nous donner la possibilité de créer un commit possédant différentes infos (id, auteur, date, description du commit, l’emplacement initial du merge).D’autre part le fichier COMMIT.java donne la possibilité d’y ajouter des types plus précis.Commit.java :Attributs :-String id-LocalDateTime dat-String weekDayofDate-String author-String mergedFrom-String description-int linesAdded=0-int linesDeleted=0Constructeur de type Commit prenant tous les attributs sauf linesAdded et linesDeleted.Méthodes :	-parseLog de type List<Commit> qui prend un reader de type BufferedReader en paramètre et renvoie une liste de commit. 	- getNumberLines se contente d’actualiser le nombres de lignes ajoutées ou supprimées => toute modification apparente. Elle prend donc en argument un chemin ainsi qu’une liste de commits. Pour récuperer le tableau de la fonction parseLine, il faut lui passer un BufferedReader i.e une commande du SHELL par exemple.		-parseLogFromCommand de type List<Commit> qui récupère les résultats de « git log » en une liste de commits. 	-parseLogFromCommandall de type List<Commit> qui récupère les résultats de « git log —all » en une liste de commits.	-command de typer BufferedReader permet   	-parseCommit qui permet de parcourir un input afin de créer un Commit adéquat et qui correspond à ces informations.La fonction lit notre input ligne par ligne et y remplit les informations nécessaires de notre commit. On teste les erreurs systématiquement pour voir si notre Commit ne reçoit pas d’informations erronées ou incompatibles d’où la création d’exceptions afin de capturer les potentielles erreurs.	-command de type BufferedReader : pour chaque commit on crée une commande contenant le chemin adéquat associée avec l’id du commit qui permet de l’identifier simplement.Cette action est gérée grâce à la méthode command qui a pour but de crée un objet de type BufferedReader représentant ainsi une commande avec des arguments.De là on peut récuperer le nombre de lignes sous forme de tableau pour chaque commit de notre liste.	-parseLine permet de renvoyer un tableau contenant respectivement le nombre de lignes supprimées et le nombres de lignes ajoutées. Pour ce faire, elle prend en argument un objet de type BufferedReader et gère les exceptions avec un try/catch. En effet, si il y a une erreur d’entrées/sortie alors la fonction attrapera cette erreur à l’exécution et ne parsera pas les informations.	-parseCommit de type Optional<Commit> permet d’analyser les log et les sorties du commit	-parseError de type void qui aide les fonctions pour génère des exceptions. 	-toString de type String qui renvoie la liste des informations du Commit sous forme de String. 	CommitBuilder.java :Différent attributs sont définis que prendre la builder :- id- Author- Date- WeekDayofDate- description- MergedFromUn constructeur CommitBuilder qui construit un objet de type CommitBuilder4 setteurs :	-setAuthor de type CommitBuilder, qui change la valeur de author	-setDate de type CommitBuilder, qui change une date de typer String en une de type LocalDateTime	-setDesciption de type CommitBuilder qui change la description 	-setMergedFrom de type CommitBuilder qui change mergedFrom2 méthodes :	- createCommit de type commit qui construit un nouvel objet de type CommitBuilder. 	- stringTomonth de type int qui prend un mois en paramètre et retourne le mois qui lui correspond. 